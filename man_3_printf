.TH PRINTF 1 11-15-2022 Printf\ 0.1 Library\ Function\ Manual

.SH NAME
printf - format and print data

.SH SYNOPSIS
.B printf
.I FORMAT [ARGUMENT]...
.TP
.B \rprintf 
.I \rOPTION

.SH DESCRIPTION

Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:

.B --help 
display this help and exit

.B --version
output version information and exit

.SH OPTIONS

A character that specifies the type of conversion to be applied.  The conversion specifiers and their meanings are:

.B d, i 
.RS
The  int  argument  is  converted to signed decimal notation.  The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is  1. When 0 is printed with an explicit precision 0, the output is empty.

.RE 
.B o, u, x, X
.RS
The  unsigned  int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and X) notation.  The letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions.  The precision, if  any, gives  the  minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.

.RE
.B c
.RS
If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is  written.   If an  l  modifier  is  present, the wint_t (wide character) argument is converted to a multibyte sequence by a call to the wcr‚Äêtomb(3) function, with a conversion state starting in the initial state, and the resulting multibyte string is written.

.RE
.B s
.RS
If no l modifier is present: the const char * argument is expected to be a pointer to an array of character type (pointer  to a string).  Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written.  If a precision is given, no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.

If  an  l modifier is present: the const wchar_t * argument is expected to be a pointer to an array of wide characters.  Wide characters from the array are converted to multibyte characters (each by a call to the wcrtomb(3) function, with a conversion state  starting in the initial state before the first wide character), up to and including a terminating null wide character. The resulting multibyte characters are written up to (but not including) the terminating null byte.  If a precision is specified,  no  more  bytes than the number specified are written, but no partial multibyte characters are written.  Note that the precision determines the number of bytes written, not the number of wide characters or screen positions.  The array must contain  a  terminating null wide character, unless a precision is given and it is so small that the number of bytes written exceeds it before the end of the array is reached.

.RE
.B p
	The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).

.RE
.B r 
	asfdgasdgadfvadfv

.RE
.B % 
	A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.

.SH RETURN VALUE

Upon successful return, these functions return the number of characters printed (excluding the null  byte  used  to  end  output  to strings). If an output error is encountered, a negative value is returned.

.SH EXAMPLES

aerg
